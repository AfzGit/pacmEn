#!/bin/bash

# -------------------------------
# Chose the aur helper you use
# -------------------------------
# AUR=yay
# AUR=paru
# -------------------------------

# Variable AUR set:
if [[ -n $AUR ]]; then
    AUR=$AUR

# Variable AUR not set:
else

    if [[ -f $(which paru) ]]; then
        AUR=paru
    elif [[ -f $(which yay) ]]; then
        AUR=yay
    else
        echo "Warning! No AUR helper detected!"
    fi

fi

# Initial prompt
if ! [[ -n "$1" ]]; then

    echo -e "=== Pacmen ==="
    echo -e "[A]UR package install (using paru)"
    echo -e "[C]lean unused packages and files"
    echo -e "[I]nstall a package"
    echo -e "[R]emove a package"
    echo -e "[S]earch a package (official then aur)"
    echo -e "[T]ree view of dependencies of a package"
    echo -e "[U]pdate whole system"
    echo -e "[V]iew installed packages\n"

    read -p "Choose: " x
fi

# HELP
if [[ "$1" = "-h" || "$1" = "--help" ||  "$1" = "h" || "$1" = "help" ]]; then

    echo "Pacmen is an interactive and user friendly frontend pacman."

    echo -e "\nUsage:"
    echo -e "-> pacmen\n     Interactive version"
    echo -e "-> pacmen aur\n     To install packages from the AUR"
    echo -e "-> pacmen clean\n     To clean from installed packages"
    echo -e "-> pacmen install\n     To Install packages"
    echo -e "-> pacmen remove\n     To Remove packages"
    echo -e "-> pacmen search\n     To search for packages"
    echo -e "-> pacmen tree\n     See package dependencies"
    echo -e "-> pacmen update\n     To Update system"
    echo -e "-> pacmen view\n     To view installed packages"

    echo -e "\nExamples:"
    echo -e "-> pacmen install firefox\n     will search for firefox and install it"
    echo -e "-> pacmen i firefox\n     will also search for firefox and install it"
    echo -e "-> pacmen remove firefox\n     will remove firefox"

    exit

# AUR: for installing from the AUR
elif [[ "$x" = "a" || "$x" = "A" || "$1" = "a" || "$1" = "A" || "$1" = "aur" ]]; then

    if ! [[ -n "$2" ]]; then
        read -p "AUR Package search: " pak
    else
        pak=$2
    fi

    # $AUR -Ss $pak | less
    echo "Select package to install:"
    pakinstall=$($AUR -Ss $pak | awk -F/ '{print $2}' | awk '{print $1}' | sed -r '/^\s*$/d' | fzf --height=35% --border=sharp)

    if [[ -z $pakinstall ]]; then
        echo "Exiting..."
        exit
    fi
    echo "-> $AUR -S $pakinstall"
    $AUR -S $pakinstall

# CLEAN: cleaning packages cache
elif [[ "$x" = "c" || "$x" = "C" || "$1" = "c" || "$1" = "C" || "$1" = "clean" ]]; then

    echo "Remove unused dependencies"
    echo "-> pacman -Qtdq | sudo pacman -Rns -"
    pacman -Qtdq | sudo pacman -Rns -
    echo "-> paccache -r"
    paccache -r
    echo "-> $AUR --sync --clean"
    $AUR --sync --clean


# INSTALL: for installing pakages
elif [[ "$x" = "i" || "$x" = "I" || "$1" = "i" || "$1" = "I" || "$1" = "install" ]]; then

    # for 2nd argument already given with search (like pacmen s vim)
    if ! [[ -n "$2" ]]; then
        read -p "Package search: " pak
    else
        pak=$2
    fi

    echo "Select package to install:"
    pakinstall=$(pacman -Ss $pak | awk -F/ '{print $2}' | awk '{print $1}' | sed -r '/^\s*$/d' | fzf --height=35% --border=sharp)

    echo "-> sudo pacman -S $pakinstall"
    if [[ -z $pakinstall ]]; then
        echo "Exiting..."
        exit
    fi

    sudo pacman -S $pakinstall

# REM: for removing a package
elif [[ "$x" = "r" || "$x" = "R" || "$1" = "r" || "$1" = "R" || "$1" = "remove" || "$1" = "rem" ]]; then

    if ! [[ -n "$2" ]]; then
        echo "Select package to remove:"
        rem=$(pacman -Qs | awk -F/ '{print $2}' | awk '{print $1}' | sed -r '/^\s*$/d' | fzf --height=35% --border=sharp)
    else
        rem=$(pacman -Qs $2 | awk -F/ '{print $2}' | awk '{print $1}' | sed -r '/^\s*$/d' | fzf --height=35% --border=sharp)
    fi

    if [[ -z $rem ]]; then
        echo "Exiting..."
        exit
    fi

    echo "-> sudo pacman -Rs $rem"
    sudo pacman -Rs $rem

# SEARCH: for searching pakages to install
elif [[ "$x" = "s" || "$x" = "S" || "$1" = "s" || "$1" = "S" || "$1" = "search" ]]; then

    # for 2nd argument already given with install (like pacmen i vim)
    if ! [[ -n "$2" ]]; then
        read -p "Package search: " pak
    else
        pak=$2
    fi

    echo "-> pacman -Ss $pak | less"
    pacman -Ss $pak | less

    read -p "Search the AUR? [Y/n] " choice

    if [[ "$choice" = "n" || "$choice" = "N" ]]; then
        echo "Skipping AUR..."
    else
        echo "-> $AUR -Ss $pak | less"
        $AUR -Ss $pak | less
    fi

    read -p "Install from Local/Aur/No? [L/A/N] " choice
    if [[ $choice = "L" || $choice = "l" ]]; then
        pacmen i $pak
    elif [[ $choice = "A" || $choice = "a" ]]; then
        pacmen a $pak
    else
        exit
    fi

    exit

# TREE: Tree view of dependencies using pactree
elif [[ "$x" = "t" || "$x" = "T" || "$1" = "t" || "$1" = "T" || "$1" = "tree" ]]; then
    if [[ -z "$2" ]]; then
        pak=$(pacman -Qs | awk -F/ '{print $2}' | awk '{print $1}' | sed -r '/^\s*$/d' | fzf --height=35% --border=sharp)
    else
        pak=$(pacman -Qs $2 | awk -F/ '{print $2}' | awk '{print $1}' | sed -r '/^\s*$/d' | fzf --height=35% --border=sharp)
    fi

    pactree $pak | less

    exit

# UPDATE: updating the whole system
elif [[ "$x" = "U" || "$x" = "u" || "$1" = "u" || "$1" = "U" || "$1" = "update" ]]; then

    echo "-> sudo pacman -Syyu"
    sudo pacman -Syyu

    read -p "Update AUR Packages? [Y/n] " choice

    if [[ "$choice" = "n" || "$choice" = "N" ]]; then
        echo "Exiting..."
        exit
    elif [[ "$AUR" = "yay" ]]; then
        echo "-> yay --refresh"
        yay --refresh
    elif [[ "$AUR" = "paru" ]]; then
        echo "-> paru -Sua"
        paru -Sua
    fi

# VIEW: view packages
elif [[ "$x" = "v" || "$x" = "V" || "$1" = "v" || "$1" = "V" || "$1" = "view" ]]; then

    if [[ -z "$2" ]]; then
        echo "-> pacman -Qs | less"
        pacman -Qs | less
    else
        echo "-> pacman -Qs $2 | less"
        pacman -Qs $2 | less
    fi

    exit

# wrong choice
else

    echo "Unknown inputs."
    exit

fi

echo    "=============================="
echo    "Press ENTER or Ctrl-C to exit."
read -p "=============================="
